name: Cross Build and Release

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  cross-compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust and targets
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-gnu, x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin

      - name: Install Cross Compilation Tools
        run: |
          # Windows 目标：安装 mingw-w64 工具链
          sudo apt-get update
          sudo apt-get install -y g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64

          # Linux 目标：确保 strip 工具可用
          sudo apt-get install -y binutils

          # macOS 目标：安装 osxcross 工具链
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
          mv MacOSX10.10.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh
          sudo mkdir -p /usr/local/osxcross
          sudo cp -r target/* /usr/local/osxcross/
          echo "/usr/local/osxcross/bin" >> $GITHUB_PATH
          cd ..

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Build Targets
        run: |
          # Linux builds - build warp-runner first, then warp-packer (which depends on warp-runner)
          cargo build -p warp-runner --release --target x86_64-unknown-linux-gnu
          strip target/x86_64-unknown-linux-gnu/release/warp-runner

          cargo build -p warp-packer --release --target x86_64-unknown-linux-gnu
          strip target/x86_64-unknown-linux-gnu/release/warp-packer

          # Windows builds - build warp-runner first, then warp-packer (which depends on warp-runner.exe)
          cargo build -p warp-runner --release --target x86_64-pc-windows-gnu
          strip target/x86_64-pc-windows-gnu/release/warp-runner.exe

          cargo build -p warp-packer --release --target x86_64-pc-windows-gnu
          strip target/x86_64-pc-windows-gnu/release/warp-packer.exe

          # macOS builds - build warp-runner first, then warp-packer (which depends on warp-runner)
          export PATH="/usr/local/osxcross/bin:$PATH"
          export CC=x86_64-apple-darwin14-clang
          export CXX=x86_64-apple-darwin14-clang++

          cargo build -p warp-runner --release --target x86_64-apple-darwin
          x86_64-apple-darwin14-strip target/x86_64-apple-darwin/release/warp-runner

          cargo build -p warp-packer --release --target x86_64-apple-darwin
          x86_64-apple-darwin14-strip target/x86_64-apple-darwin/release/warp-packer

          # macOS ARM64 builds - build warp-runner first, then warp-packer (which depends on warp-runner)
          export CC=aarch64-apple-darwin20-clang
          export CXX=aarch64-apple-darwin20-clang++

          cargo build -p warp-runner --release --target aarch64-apple-darwin
          aarch64-apple-darwin20-strip target/aarch64-apple-darwin/release/warp-runner

          cargo build -p warp-packer --release --target aarch64-apple-darwin
          aarch64-apple-darwin20-strip target/aarch64-apple-darwin/release/warp-packer

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: multi-platform-binaries
          path: |
            target/x86_64-pc-windows-gnu/release/warp-packer.exe
            target/x86_64-pc-windows-gnu/release/warp-runner.exe
            target/x86_64-unknown-linux-gnu/release/warp-packer
            target/x86_64-unknown-linux-gnu/release/warp-runner
            target/x86_64-apple-darwin/release/warp-packer
            target/x86_64-apple-darwin/release/warp-runner
            target/aarch64-apple-darwin/release/warp-packer
            target/aarch64-apple-darwin/release/warp-runner
